pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        maven 'maven'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', changelog: false, poll: false, url: 'https://github.com/CoderUrch/Mission.git'
            }
        }
        
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        
        stage('Test') {
            steps {
               sh "mvn test -DskipTests=true"
            }
        }
        
        stage('Trivy Scan File System') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=Mission -Dsonar.projectName=Mission \
                    -Dsonar.java.binaries=. '''
                }
            }
        }
        
        stage('Build') {
            steps {
                sh "mvn package -DskipTests=true"
            }
        }
        
        stage('Deploy Artifacts to Nexus') {
            steps {
               withMaven(globalMavenSettingsConfig: 'maven-setting', jdk: 'jdk17', maven: 'maven', mavenSettingsConfig: '', traceability: true) {
                    sh "mvn deploy -DskipTests=true"
                }
            }
        }
        
        stage('Build & Tag Docker Image') {
            steps {
                script{
                // This step should not normally be used in your script. Consult the inline help for details.
                    withDockerRegistry(credentialsId: 'docker-credible', toolName: 'docker') {
                        sh "docker build -t urchytech/mission:latest ."
                    }
                }
            }
        }
        
        stage('Trivy Scan Docker Image') {
            steps {
                sh "trivy image --format table -o trivy-docker-image-report.html urchytech/mission:latest"
            }
        }
        
        stage('Publish Docker Image') {
            steps {
                script{
                // This step should not normally be used in your script. Consult the inline help for details.
                    withDockerRegistry(credentialsId: 'docker-credible', toolName: 'docker') {
                        sh "docker push urchytech/mission:latest"
                    }
                }
            }
        }
        
        stage('Deploy to Container') {
            steps {
                script{
                // This step should not normally be used in your script. Consult the inline help for details.
                    withDockerRegistry(credentialsId: 'docker-credible', toolName: 'docker') {
                        sh "docker run -d  --name mission-prod -p 8081:8080 urchytech/mission:latest"
                    }
                }
            }
        }
        
        stage('Deploy to K8') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'urcbaba-eks22', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://4318C0F9D3C45DC3FDD4CF8D0D7F956B.yl4.us-east-1.eks.amazonaws.com') {
                    sh "kubectl apply -f deploy.yaml -n webapps"
                    sleep 60
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'urcbaba-eks22', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://4318C0F9D3C45DC3FDD4CF8D0D7F956B.yl4.us-east-1.eks.amazonaws.com') {
                    sh "kubectl get pods -n webapps"
                     sh "kubectl get svc -n webapps"
                }
            }
        }
        
    }
    
    post {
        always {
            emailext (
                subject: "Jenkins Build - ${currentBuild.fullDisplayName}",
                body: "Build completed with status: ${currentBuild.currentResult}\n\nCheck the details at: ${env.BUILD_URL}",
                to: 'amikhan.aws@gmail.com'
            )
        }
    }

}
